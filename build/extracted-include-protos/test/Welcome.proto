package proto;

import "google/protobuf/timestamp.proto";

service Manager{
  //Service used when a drone enters the network
  rpc Welcome(WelcomeMessage) returns (WelcomeResponse);
  //Service used for the election
  rpc Election(ElectionMessage) returns (ElectionResponse);
  //Service used after the election
  rpc Elected(ElectedMessage) returns (ElectedResponse);
  //Service used to check if master is alive
  rpc Alive(AliveMessage) returns (AliveResponse);
  //Service used to assign the delivery
  rpc Delivery(DeliveryMessage) returns (DeliveryResponse);
  //Service used to comunicate the success on the delivery
  rpc Delivered(DeliveredMessage) returns (DeliveredResponse);
  //Service used to request the availability of the recharge station
  rpc Recharge(RechargeRequest) returns (RechargeResponse);
  //Service used to comunicate the master new position after recharge
  rpc RechargeCompleted(RechargeComplete) returns (RechargeCompleteResponse);
  //Service used to comunicate the uncontrolled exit of a drone from the network
  rpc UnavailableDrone(UnavailableDroneMessage) returns (UnavailableDroneResponse);
  //Service used to comunicate the new master the position of the drone
  rpc SendPosition(PositionMessage) returns (PositionResponse);
  //Service used to assign to other drones the pending deliveries
  rpc AssignPendingDeliveries(PendingOrdersMessage) returns (PendingOrdersResponse);
}

//Message position
message Position{
  required int32 x = 1;
  required int32 y = 2;
}

//Message of welcome
message WelcomeMessage {
  required int32 port = 1;
  required int32 id = 2;
  required string ip = 3;
  required Position position = 4;
}

//Message of response to the welcome
message WelcomeResponse {
  required int32 id = 1;
  required bool master = 2;
}

//Message sent for the election
message ElectionMessage{
  required int32 battery = 1;
  required int32 id = 2;
}

//Message of ack
message ElectionResponse{
  required bool received = 1;
}

//Message sent after the network find the master
message ElectedMessage{
  required int32 id = 1;
}

//Message of ack
message ElectedResponse{
  required bool received = 1;
}

//Message to find if master is alive
message AliveMessage{
   required int32 id = 1;
}

//Message to find if master is alive
message AliveResponse{
  required bool isAlive = 1;
}

message DeliveryMessage{
 required Position retire = 1;
 required Position delivery = 2;
 required int32 orderId = 3;
}

message DeliveryResponse{
  required bool received = 1;
}

message DeliveredMessage{
  required string timestamp = 1;
  required Position newPosition = 2;
  required double km = 3;
  required double avgPollution = 4;
  required int32 battery = 5;
  required int32 id = 6;
  required int32 orderId = 7;
}

message DeliveredResponse{
  required bool received = 1;
}

message RechargeRequest{
  required int32 id = 1;
  required google.protobuf.Timestamp timestamp = 2;
}

message RechargeResponse{
  required bool free = 1;
}

message RechargeComplete{
  required int32 id = 1;
  required Position newPosition = 2;
  required int32  batteryLevel = 3;
}

message RechargeCompleteResponse{
  required bool received = 1;
}

message UnavailableDroneMessage{
  required int32 id = 1;
  required int32 startingDroneID = 2;
}

message UnavailableDroneResponse{
  required bool received = 1;
}

message PositionMessage{
  required Position position = 1;
  required int32 id = 2;
}

message PositionResponse{
  required bool received = 1;
}

message Order{
  required int32 id = 1;
  required Position retire = 2;
  required Position delivery = 3;
}

message PendingOrdersMessage{
  required Order order = 1;
}

message PendingOrdersResponse{
  required bool received = 1;
}